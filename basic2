# SQL_활용
## 관계형 데이터베이스

* 메타 데이터를 총괄 관리할 수 있기 때문에 데이터의 성격, 속성 또는 표현 방법 등을 체계화할 수 있ㅇ
* 데이터 표준화를 통한 데이터 품질을 확보할 수 ㅇ
* DBMS는 인증된 사용자만이 참조할 수 있도록 보안 기능을 제공
* 테이블 생성 시에 사용할 수 있는 다양한 제약조건을 이용하여 사용자가 실수로 조건에 위배되는 데이터를 입력한다든지, 관계를 연결하는 중요 데이터를 삭제하는 것을 방지-> 데이터 무결성보장할 수 ㅇ  
*  DBMS는 시스템의 갑작스런 장애로부터 사용자가 입력, 수정, 삭제하던 데이터가 제대로 반영될 수 있도록 보장해주는 기능과, 시스템 다운, 재해 등의 상황에서도 데이터를 회복/복구할 수 있는 기능을 제공
## SQL
![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_148.jpg)
* SQL 문장과 관련된 용어 중에서 먼저 테이블에 대한 내용은 건드리지 않고 단순히 조회를 하는 SELECT 문장이 있다. 
* 테이블에 들어 있는 데이터에 변경을 가하는 UPDATE, DELETE, INSERT 문장은 테이블에 들어 있는 데이터들을 조작하는 종류의 SQL 문장들이다. 
* 그 외, 테이블을 생성하고 수정하고 변경하고 삭제하는 테이블 관련 SQL 문장이 있고, 추가로 데이터에 대한 권한을 제어하는 SQL 문장도 있다.
## TABLE
>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_149.jpg)

>별도의 정리 작업을 하지 않은 왼쪽 내용은 본인이 아니라면 알아보기도 힘들고 다른 사용자에게 큰 도움이 되지 않는다. 
but 오른쪽의 내용은 선수별로 필요한 정보가 정리되어 관심 있는 다른 사용자에게 도움이 될 수 있다.  
![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_150.jpg)

>데이터는 관계형 데이터베이스의 기본 단위인 테이블 형태로 저장된다. 모든 자료는 테이블에 등록이 되고, 우리는 테이블로부터 원하는 자료를 꺼내 올 수 있다.  
테이블은 어느 특정한 주제와 목적으로 만들어지는 일종의 집합이다. 
이 표만 있다면 내가 좋아하는 선수들의 상세한 정보들을 볼 수 있고, 선수들의 정보를 상호간에 비교해 볼 수도 있다.
 새로운 선수를 입력하려고 할 때 새로운 테이블을 생성할 필요 없이 데이터만 추가함으로서 선수들의 정보를 모두 관리할 수 있다.

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_151.jpg)

>선수, 팀, 팀연고지, 포지션, 등번호, 생년월일, 키, 몸무게가 각각의 칼럼이 되며, 해당 테이블은 반드시 하나 이상의 칼럼을 가져야 한다.  
ex) 이청용 선수에 대한 정보는 아래와 같이 8개의 칼럼을 가지는 하나의 행으로 데이터화 되어 테이블에 저장된 것이다

![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_152.jpg)

> 테이블에는 등록된 자료들이 있으며, 이 자료들은 삭제하지 않는 한 지속적으로 유지된다. 
> 만약 우리가 자료를 입력하지 않는다면 테이블은 본래 만들어졌을 때부터 가지고 있던 속성을 그대로 유지하면서 존재하게 된다.

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_153.jpg)

>테이블에 대해서 좀 더 상세히 살펴보면 테이블(TABLE)은 데이터를 저장하는 객체로서 관계형 데이터베이스의 기본 단위이다. 
>모든 데이터를 칼럼과 행의 2차원 구조로 나타낸다. 
>**칼럼**:세로 방향
>**행**:가로 방향
>**필드**:칼럼과 행이 겹치는 하나의 공간
>선수정보 테이블을 예로 들면 선수명과 포지션 등의 칼럼이 있고, 각 선수에 대한 데이터를 행으로 구성하여 저장한다.

![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_154.jpg)

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_155.jpg)

>선수와 관련된 데이터를 저장할 때 모든 데이터를 하나의 테이블로 저장하지 않는다.
>선수와 관련된 데이터를 선수 테이블과 구단 테이블이라는 복수의 테이블로 분할하여 저장하고 있다.  
분할된 테이블은 그 칼럼의 값에 의해 연결된다.
 이렇게 테이블을 분할하여 데이터의 불필요한 중복을 줄이는 것을 정규화
 데이터의 정합성 확보와 데이터 입력/수정/삭제시 발생할 수 있는 이상현상을 방지하기 위해 정규화는 관계형 데이터베이스 모델링에서 매우 중요한 프로세스이다.

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_156.jpg)

>각 행을 한 가지 의미로 특정할 수 있는 한 개 이상의 칼럼을 기본키라고 하며, 여기서는 <선수> 테이블의 ‘선수번호’와 <구단> 테이블의 ‘구단코드’가 기본키가 된다.
>  <선수> 테이블의 ‘구단코드’와 같이 다른 테이블의 기본 키로 사용되면서 테이블과의 관계를 연결하는 역할을 하는 칼럼을 외부키라고 한다.

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_157.jpg)
## ERD(Entity Relationship Diagram)

팀 정보와 선수 정보 간에는 어떤 의미의 관계가 존재하며, 다른 테이블과도 어떤 의미의 연관성이나 관계를 가지고 있다. 

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_158.jpg)

>팀과 선수 간에는 “소속”이라는 관계가 맺어져 있다. 테이블 간 서로의 상관 관계를 그림으로 도식화한 것을 E-R 다이어그램이라고 하며, 간략히 ERD라고 한다. 
>* ERD의 구성 요소는 엔터티, 관계, 속성 3가지이며 현실 세계의 데이터는 이 3가지 구성 요소로 모두 표현이 가능하다.  
 K-리그의 테이블 관계를 IE 표기법과 Barker 표기법으로 표현한 ERD이다.

#### ERD
![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_159.jpg)
>- 하나의 팀은 여러 명의 선수를 포함할 수 있다. - 한 명의 선수는 하나의 팀에 꼭 속한다.

>- 하나의 팀은 하나의 전용 구장을 꼭 가진다. - 하나의 운동장은 하나의 홈팀을 가질 수 있다.

>- 하나의 운동장은 여러 게임의 스케줄을 가질 수 있다. - 하나의 스케줄은 하나의 운동장에 꼭 배정된다.
![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_160.jpg)

>사원-부서 테이블 간의 양방향 관계는 다음과 같다.

>![sql가이드](http://www.dbguide.net/publishing/img/knowledge/SQL_161.jpg)

>- 하나의 부서는 여러 명의 사원을 보유할 수 있다. - 한 명의 사원은 하나의 부서에 꼭 소속된다.
